//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Player.java
//  @ Date : 16/04/2023
//  @ Author : 
//
//


public abstract class Player {
	protected Inventory inventory;
	protected NetworkElement position;
	protected boolean stuck;
	protected int stuckTimeLeft;

	/** */
	public Player() {
		position = null;
		stuck = false;
		stuckTimeLeft = 0;
		inventory = new Inventory(this);
	}

	/** */
	public Player(NetworkElement ne) {
		position = ne;
		stuck = false;
		stuckTimeLeft = 0;
		inventory = new Inventory(this);
	}

	/** */
	public NetworkElement getPosition() {
		return this.position;
	}

	/** */
	public void setPosition(NetworkElement ne) {
		this.position = ne;
	}

	/** */
	public boolean getStuck() {
		return this.stuck;
	}

	/** */
	public void setStuck(boolean b) {
		this.stuck  = b;
	}

	/** */
	public int getStuckTimeLeft() {
		return this.stuckTimeLeft;
	}

	/** */
	public void setStuckTimeLeft(int i) {
		this.stuckTimeLeft = i;
	}

	/** */
	public Inventory getInventory() {
		return this.inventory;
	}

	/** */
	public void setInventory(Inventory inv) {
		this.inventory = inv;
	}

	/** */
	public abstract void takePump(Inventory inv);

	/** */
	public abstract void placePump();

	/** */
	public abstract void connectPipe();

	/** */
	public abstract void disconnectPipe(NetworkElement ne);

	public void tick(){
		if (stuck){
			stuckTimeLeft--;
			if (stuckTimeLeft <= 0){
				stuck = false;
			}
		}
	}

	//TODO
	public void move(NetworkElement ne) {
		if (ne.accept(this)){
			this.setPosition(ne);
		}
	}
	
	/** */
	public void directPump(Pump pump, NetworkElement in, NetworkElement out) {
		position.direct(in, out);
	}

	public void makePipeSticky(Pipe p){
		p.setSticky(true);
	}

	public void breakPipe(Pipe p){
		p.breakPipe();
	}
}
